image: node:11

stages:
  - prepare
  - build
  - test
  - deploy

variables:
  CACHE_ROOT: /cache/${CI_PROJECT_PATH_SLUG}
  CACHE_DIR: /cache/${CI_PROJECT_PATH_SLUG}/${CI_COMMIT_SHA}-${CI_COMMIT_REF_SLUG}
  CHROMIUM_DEPS: xvfb gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget

Cache auto-clean and prepare:
  tags: [shared-ci-docker]
  stage: prepare
  variables:
    GIT_STRATEGY: none
  script:
    - echo "Create cache root & current build folder"
    - mkdir -p $CACHE_DIR
    - ls -alh $CACHE_ROOT
    - echo "Drop builds older than 1 day"
    - bash -ec 'while read file; do rm -rfv "$file"; done < <( find $CACHE_ROOT -maxdepth 1 -type d -mtime +1 )'

Force cache clean:
  tags: [shared-ci-docker]
  stage: prepare
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - rm -rfv $CACHE_ROOT

Build Jekyll:
  image: ruby:2.3
  tags: [shared-ci-docker]
  stage: build
  when: on_success
  variables:
    JEKYLL_ENV: production
  script:
    - gem install jekyll bundler
    - jekyll build -d $CACHE_DIR

Run e2e tests:
  tags: [shared-ci-docker]
  stage: test
  when: on_success
  script:
    - cp -r $CACHE_DIR _site
    - apt update
    - apt -y install $CHROMIUM_DEPS
    - npm ci
    - npm test

Deploy qa manually: &deploy_qa
  tags: [shared-ci-docker]
  stage: deploy
  when: manual
  dependencies: [Build Jekyll]
  variables:
    GIT_STRATEGY: none
    SITE_ID: caue24-qa.netlify.com
  script:
    - npx netlify-cli deploy --site=$SITE_ID --auth=$NETLIFY_ACCESS_TOKEN  --dir=$CACHE_DIR --prod

Deploy qa auto:
  <<: *deploy_qa
  when: on_success
  only: [gh-pages]
